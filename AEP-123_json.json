{
  "issue_key": "AEP-123",
  "summary": "Implement core functionality for AEP",
  "description": "Create a complete implementation for the AEP project",
  "requirements": [
    "Implement REST API endpoints",
    "Add database integration",
    "Include authentication middleware",
    "Add comprehensive error handling",
    "Implement logging throughout",
    "Include unit tests",
    "Follow clean code principles"
  ],
  "technical_specifications": {
    "framework": "FastAPI",
    "language": "Python",
    "database": "PostgreSQL",
    "authentication": "JWT",
    "testing": "Pytest",
    "logging": "Structured logging with JSON format"
  },
  "project_structure": {
    "main_file": "main.py",
    "database": {
      "models": "models.py",
      "schemas": "schemas.py",
      "crud": "crud.py"
    },
    "api": {
      "endpoints": "endpoints/",
      "auth": "auth.py"
    },
    "core": {
      "config": "core/config.py",
      "security": "core/security.py",
      "logging": "core/logging.py"
    },
    "tests": {
      "unit": "tests/unit/",
      "integration": "tests/integration/"
    }
  },
  "api_endpoints": [
    {
      "path": "/api/v1/health",
      "method": "GET",
      "description": "Health check endpoint",
      "authentication_required": false
    },
    {
      "path": "/api/v1/auth/login",
      "method": "POST",
      "description": "User login endpoint",
      "authentication_required": false
    },
    {
      "path": "/api/v1/auth/register",
      "method": "POST",
      "description": "User registration endpoint",
      "authentication_required": false
    },
    {
      "path": "/api/v1/users/{user_id}",
      "method": "GET",
      "description": "Get user by ID",
      "authentication_required": true
    },
    {
      "path": "/api/v1/items",
      "method": "POST",
      "description": "Create new item",
      "authentication_required": true
    },
    {
      "path": "/api/v1/items/{item_id}",
      "method": "GET",
      "description": "Get item by ID",
      "authentication_required": true
    },
    {
      "path": "/api/v1/items",
      "method": "GET",
      "description": "Get all items with pagination",
      "authentication_required": true
    }
  ],
  "database_schema": {
    "users": {
      "id": "UUID (Primary Key)",
      "email": "VARCHAR(255) (Unique)",
      "hashed_password": "VARCHAR(255)",
      "full_name": "VARCHAR(255)",
      "is_active": "BOOLEAN",
      "created_at": "TIMESTAMP",
      "updated_at": "TIMESTAMP"
    },
    "items": {
      "id": "UUID (Primary Key)",
      "title": "VARCHAR(255)",
      "description": "TEXT",
      "owner_id": "UUID (Foreign Key to users.id)",
      "created_at": "TIMESTAMP",
      "updated_at": "TIMESTAMP"
    }
  },
  "error_handling": {
    "http_errors": [
      {
        "code": 400,
        "message": "Bad Request - Invalid input data"
      },
      {
        "code": 401,
        "message": "Unauthorized - Invalid credentials"
      },
      {
        "code": 403,
        "message": "Forbidden - Insufficient permissions"
      },
      {
        "code": 404,
        "message": "Not Found - Resource not found"
      },
      {
        "code": 409,
        "message": "Conflict - Resource already exists"
      },
      {
        "code": 422,
        "message": "Unprocessable Entity - Validation error"
      },
      {
        "code": 500,
        "message": "Internal Server Error - Server error"
      }
    ],
    "validation_rules": {
      "email": "Must be valid email format",
      "password": "Minimum 8 characters, at least one uppercase, one lowercase, one number",
      "title": "Maximum 255 characters, required field",
      "description": "Maximum 1000 characters"
    }
  },
  "logging_config": {
    "level": "INFO",
    "format": "json",
    "rotation": "20 MB",
    "retention": "30 days",
    "log_files": [
      "app.log",
      "error.log",
      "access.log"
    ],
    "log_fields": [
      "timestamp",
      "level",
      "message",
      "module",
      "function",
      "line_number",
      "request_id",
      "user_id",
      "endpoint"
    ]
  },
  "security": {
    "jwt": {
      "algorithm": "HS256",
      "access_token_expire_minutes": 30,
      "refresh_token_expire_days": 7,
      "secret_key_env_var": "JWT_SECRET_KEY"
    },
    "password_hashing": {
      "algorithm": "bcrypt",
      "rounds": 12
    },
    "cors": {
      "allowed_origins": ["http://localhost:3000", "https://yourdomain.com"],
      "allowed_methods": ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
      "allowed_headers": ["*"],
      "allow_credentials": true
    }
  },
  "testing": {
    "unit_tests": [
      "test_auth.py",
      "test_users.py",
      "test_items.py",
      "test_models.py",
      "test_crud.py"
    ],
    "integration_tests": [
      "test_api_endpoints.py",
      "test_database_integration.py"
    ],
    "test_coverage": {
      "minimum": 80,
      "target": 90
    },
    "test_database": "test_aep_db"
  },
  "dependencies": {
    "fastapi": ">=0.68.0,<0.69.0",
    "uvicorn": ">=0.15.0,<0.16.0",
    "sqlalchemy": ">=1.4.0,<1.5.0",
    "asyncpg": ">=0.24.0,<0.25.0",
    "passlib": ">=1.7.4,<1.8.0",
    "python-jose": ">=3.3.0,<3.4.0",
    "python-multipart": ">=0.0.5,<0.0.6",
    "pydantic": ">=1.8.0,<1.9.0",
    "python-dotenv": ">=0.19.0,<0.20.0",
    "pytest": ">=6.2.0,<7.0.0",
    "pytest-asyncio": ">=0.15.0,<0.16.0",
    "httpx": ">=0.19.0,<0.20.0"
  },
  "environment_variables": {
    "DATABASE_URL": "postgresql+asyncpg://user:password@localhost:5432/aep_db",
    "JWT_SECRET_KEY": "your-super-secret-jwt-key-here",
    "ENVIRONMENT": "development|staging|production",
    "LOG_LEVEL": "INFO|DEBUG|ERROR|WARNING"
  },
  "deployment": {
    "dockerfile": true,
    "docker_compose": true,
    "health_check": "/api/v1/health",
    "readiness_probe": "/api/v1/health",
    "liveness_probe": "/api/v1/health"
  }
}